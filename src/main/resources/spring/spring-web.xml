<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd">
		
		<context:component-scan base-package="com.gsdp.controller"/>
		
		<!--1：开启springmvc注解模式 
			2：简化配置
			（1）自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter
			(2) 提供一系列额外功能：数据绑定，数字和日期的format @NumberFormat @DataTimeFormat,xml,json的默认读写支持
		
		-->
	    <mvc:annotation-driven>
			<mvc:message-converters register-defaults="true">
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes" value = "text/html;charset=UTF-8" />
				</bean>
			</mvc:message-converters>
	    </mvc:annotation-driven>

		<!-- 在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，
		会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
		它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
		就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，
		才由DispatcherServlet继续处理。

		一般Web应用服务器默认的Servlet名称是"default"，
		因此DefaultServletHttpRequestHandler可以找到它。
		如果你所有的Web应用服务器的默认Servlet名称不是"default"，
		则需要通过default-servlet-name属性显示指定：
		<mvc:default-servlet-handler default-servlet-name="所使用的Web服务器默认使用的Servlet名称" /> -->
		<mvc:default-servlet-handler/>
		
		<!-- 配置jsp的viewResovler -->
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
			<property name="prefix" value="/WEB-INF/jsps/"/>
			<property name="suffix" value=".jsp"/>
		</bean>
		
		<!-- 200 * 1012 * 1024既是200m，resolveLazily启动是为了推迟文件解析，以便捕获文件大小异常 -->
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="maxUploadSize" value="209715200"/>
			<property name="defaultEncoding" value="utf-8"/>
			<property name="resolveLazily" value="true"/>
		</bean>


	<mvc:interceptors>
		<!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<!--<bean class="com.host.app.web.interceptor.AllInterceptor"/>-->
		<mvc:interceptor>
			<mvc:mapping path="/reply/creation"/>
			<mvc:mapping path="/notice/creation"/>
			<mvc:mapping path="/activity/creation"/>
			<bean class="com.gsdp.interceptor.CheckLoginInterceptor"/>
		</mvc:interceptor>

		<mvc:interceptor>
			<!--这里只拦截了user这个控制器-->
			<mvc:mapping path="/user/**"/>
			<mvc:exclude-mapping path="/user/login"/>
			<mvc:exclude-mapping path="/user/register"/>
			<bean class="com.gsdp.interceptor.UserInterceptor"/>
		</mvc:interceptor>

		<mvc:interceptor>
			<mvc:mapping path="/notice/creation"/>
			<mvc:mapping path="/activity/creation"/>
			<bean class="com.gsdp.interceptor.CheckAdminInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/group/{groupId}/detail"/>
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean class="com.gsdp.interceptor.VerifyIdentityInterceptor"/>
		</mvc:interceptor>

	</mvc:interceptors>

</beans>
